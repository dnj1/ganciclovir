##Download reference genomes
wget https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz
gunzip hg38.fa.gz
wget "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=X17403.1&rettype=fasta&retmode=text" -O cmv.fa

##Concatenate reference genomes
cat hg38.fa cmv.fa > combined.fa

##Index the reference with minimap2
minimap2 -d combined.mmi combined.fa

##Align each sample to the combined reference (from fastq_pass directory)
cd /dartfs/rc/lab/M/McKennaLab/data/nanopore/2025-7-10-cmv-blood/2025-7-10-cmv-blood/20250710_1757_P2S-00525-A_PBC44707_e9e892f5/fastq_pass

for barcode_dir in barcode*/; do
    sample=$(basename "$barcode_dir")
    fastq_file=$(find "$barcode_dir" -name "*.fastq.gz" | head -n 1)

    if [[ ! -f "$fastq_file" ]]; then
        echo "No FASTQ file found in $barcode_dir, skipping..."
        continue
    fi

    sam_file="${sample}.sam"
    bam_file="${sample}.bam"
    sorted_bam="${sample}.sorted.bam"

    echo "Aligning $fastq_file..."

    minimap2 -ax map-ont \
      /dartfs/rc/lab/M/McKennaLab/projects/Dana/bloodsamples/combined.mmi \
      "$fastq_file" > "$sam_file"

    samtools view -Sb "$sam_file" > "$bam_file"
    samtools sort "$bam_file" -o "$sorted_bam"
    samtools index "$sorted_bam"

    rm "$sam_file" "$bam_file"
done

##Check alignment quality and stats
for bam in barcode*.sorted.bam; do
  echo "Stats for $bam:"
  samtools flagstat "$bam"
  echo
done

##Extract CMV-specific reads
for bam in barcode*.sorted.bam; do
  sample=${bam%.sorted.bam}
  samtools view -b "$bam" "X17403.1" > "${sample}.cmv.bam"
  samtools index "${sample}.cmv.bam"
done

##Quick check
samtools view -c barcode01.sorted.bam "X17403.1"
#All contig counts
samtools idxstats barcode01.sorted.bam

##Generate CMV read counts report
#!/bin/bash

# Define CMV contig name exactly as in your reference
CMV_CONTIG="X17403.1"

# Output file for the report
REPORT="cmv_read_counts_report.txt"

# Header for report
echo -e "Sample\tCMV_Read_Counts" > "$REPORT"

# Loop over all BAM files
for bam in barcode*.sorted.bam; do
  sample=${bam%.sorted.bam}
  # Count reads mapped to CMV contig
  count=$(samtools view -c "$bam" "$CMV_CONTIG")
  echo -e "${sample}\t${count}" >> "$REPORT"
done

echo "Report saved to $REPORT"

##Realign to CMV only
minimap2 -d cmv_only.mmi cmv.fa
minimap2 -ax map-ont cmv_only.mmi barcode01 | samtools sort -o barcode01.cmvonly.sorted.bam
samtools index barcode01.cmvonly.sorted.bam
samtools idxstats barcode01.cmvonly.sorted.bam


##Check fastq_fail reads for CMV
# Define reference and base path
REF_MMI=/dartfs/rc/lab/M/McKennaLab/projects/Dana/bloodsamples/combined.mmi
FASTQ_FAIL_BASE=/dartfs/rc/lab/M/McKennaLab/data/nanopore/2025-7-10-cmv-blood/2025-7-10-cmv-blood/20250710_1757_P2S-00525-A_PBC44707_e9e892f5/fastq_fail
OUTPUT_DIR="$FASTQ_FAIL_BASE/aligned_fastq_fail"

# Create central output directory
mkdir -p "$OUTPUT_DIR"

# Loop over barcode folders
for barcode_dir in "$FASTQ_FAIL_BASE"/barcode*; do
  barcode_name=$(basename "$barcode_dir")
  fq_path="$barcode_dir"/*.fastq.gz

  # Skip if no FASTQ found
  if compgen -G "$fq_path" > /dev/null; then
    echo "Aligning $barcode_name..."

    minimap2 -ax map-ont "$REF_MMI" $fq_path \
      | samtools sort -o "$OUTPUT_DIR/${barcode_name}.sorted.bam"

    samtools index "$OUTPUT_DIR/${barcode_name}.sorted.bam"
  else
    echo "No FASTQ found in $barcode_dir â€” skipping."
  fi
done

##Count CMV-aligned reads
# Define variables
ALIGN_DIR=/dartfs/rc/lab/M/McKennaLab/data/nanopore/2025-7-10-cmv-blood/2025-7-10-cmv-blood/20250710_1757_P2S-00525-A_PBC44707_e9e892f5/fastq_fail/aligned_fastq_fail
CMV_CONTIG="X17403.1"
OUTFILE="$ALIGN_DIR/cmv_read_counts.tsv"

# Write header
echo -e "Barcode\tCMV_Reads" > "$OUTFILE"

# Loop over each BAM file
for bam in "$ALIGN_DIR"/barcode*.sorted.bam; do
  barcode=$(basename "$bam" .sorted.bam)

  # Count reads aligned to the CMV contig
  count=$(samtools view -c "$bam" "$CMV_CONTIG")

  # Append result to output file
  echo -e "$barcode\t$count" >> "$OUTFILE"
done

echo "CMV read counts written to: $OUTFILE"

##Now look at unclassified reads
# Reference
REF_MMI=/dartfs/rc/lab/M/McKennaLab/projects/Dana/bloodsamples/combined.mmi
CMV_CONTIG="X17403.1"

# Input/output
UNCLASSIFIED_DIR=/dartfs/rc/lab/M/McKennaLab/data/nanopore/2025-7-10-cmv-blood/2025-7-10-cmv-blood/20250710_1757_P2S-00525-A_PBC44707_e9e892f5/fastq_fail/unclassified
OUTPUT_DIR="$UNCLASSIFIED_DIR/aligned_unclassified"
mkdir -p "$OUTPUT_DIR"

# Loop through fastq.gz files in the unclassified directory
for fq in "$UNCLASSIFIED_DIR"/*.fastq.gz; do
  sample=$(basename "$fq" .fastq.gz)

  echo "Aligning unclassified reads: $sample"

  minimap2 -ax map-ont "$REF_MMI" "$fq" \
    | samtools sort -o "$OUTPUT_DIR/${sample}.sorted.bam"

  samtools index "$OUTPUT_DIR/${sample}.sorted.bam"
done

# Output file for counts
COUNT_TABLE="$OUTPUT_DIR/cmv_read_counts_unclassified.tsv"
echo -e "Sample\tCMV_Reads" > "$COUNT_TABLE"

# Loop through BAM files and count reads aligning to CMV
for bam in "$OUTPUT_DIR"/*.sorted.bam; do
  sample=$(basename "$bam" .sorted.bam)

  count=$(samtools view -c "$bam" "$CMV_CONTIG")

  echo -e "$sample\t$count" >> "$COUNT_TABLE"
done

echo "CMV read counts written to: $COUNT_TABLE"



